<h1>Arrays</h1>

<p>Array are a collection of items stored inside one variable. They like a box that has other boxes inside of it. They're useful for passing passing around mulitple values nicely package.</p>

<p>You use the <code>array</code> keyword to create arrays and then a comma-separated list of items. Strings require quotes, numbers do not.</p>

<pre class="prettyprint linenums languague-php">
// array of letters
$letters = array('z','y','a','n','b','x','c');
$numbers = array(1, 7, 3, 85, -3, 1);
$empty_array = array(); // an empty array, (a falsy value)
</pre>

<p>You can put mixed items into an array, including other variables (and, as in this example, other arrays).</p>
<pre class="prettyprint linenums languague-php">
$mixed = array( 'a string', 1, $letters);
</pre>



<h2>Selecting items</h2>
<p>Each item in an array has an <em>index</em>; this is the postition of the item within the array. Arrays are <em>zero-indexed</em>; meaning the index starts at zero.</p>

<p>We use square brack notation to select an item.</p>

<pre class="prettyprint linenums languague-php">
echo $letters[0]; // z
</pre>

<h2>Adding items</h2>
<p>The easiest way to add an item to an array is to use empty square brackets:</p>

<pre class="prettyprint linenums languague-php">
$fruit = array(&#039;apple&#039;,&#039;banana&#039;);
$fruit[] = &#039;orange&#039;;
// $fruit = array(&#039;apple&#039;,&#039;banana&#039;,&#039;orange&#039;);
</pre>

<h3>array_push</h3>
<p>You can also use <code>array_push</code> that does the same thing:</p>
<pre class="prettyprint linenums languague-php">
array_push($fruit, 'grapes');
$fruit = array(&#039;apple&#039;,&#039;banana&#039;,&#039;orange&#039;,&#039;grapes&#039;);
array_push($fruit, &#039;melon&#039;, &#039;strawberries&#039;); // adds multiple values
</pre>



<h2>Testing arrays</h2>

<h3>empty</h3>
<p>You can use the <code>empty</code> function to test if an array has items within it. It won't throw and error if the array itself doesn't exist.</p>
<pre class="prettyprint linenums languague-php">
$empty_array = array();
if ( empty( $empty_array )) { echo 'The array has no values in it.'; }
</pre>

<p>A useful variation is to perform an action if the array is not empty. We use the exclaimation mark to negate the test, that is test for the opposite value.</p>
<pre class="prettyprint linenums languague-php">
$not_empty = array( 1 );
if ( ! empty( $empty_array )) { echo 'The array is not empty'; }
</pre>


<h3>print_r</h3>
<p>We use <code>print_r()</code> to print out an array in a human readable format. This is really only a good idea for testing.</p>
<pre class="prettyprint linenums languague-php">
print_r($letters);
Array
(
    [0] => z
    [1] => y
    [2] => a
    [3] => n
    [4] => b
    [5] => x
    [6] => c
)
</pre>
<p>Note print_r uses whitespace to format the array, so you will want to either view the page source or use html &lt;pre&gt; tags to see it formatted nicely.</p>

<p><code>var_dump</code> will give you a bit more information about arrays (and any variable for that matter):</p>
<pre class="prettyprint linenums languague-php">
var_dump($letters);
array(7) { [0]=&gt; string(1) &quot;z&quot; [1]=&gt; string(1) &quot;y&quot; [2]=&gt; string(1) &quot;a&quot; [3]=&gt; string(1) &quot;n&quot; [4]=&gt; string(1) &quot;b&quot; [5]=&gt; string(1) &quot;x&quot; [6]=&gt; string(1) &quot;c&quot; }
</pre>


<ul class="notes-links">
	<li><a href="http://nz.php.net/empty">empty</a></li>
	<li><a href="http://nz.php.net/print_r">print_r</a></li>
	<li><a href="http://nz.php.net/var_dump">var_dump</a></li>
	<li><a href="http://nz.php.net/array_push">array_push</a></li>
</ul>
