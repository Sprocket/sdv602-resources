<h1>Arrays</h1>

<p>Array are a collection of items stored inside one variable. They like a box that has other boxes inside of it. They're useful for passing passing around mulitple values nicely package.</p>

<p>You use the <code>array</code> keyword to create arrays and then a comma-separated list of items. Strings require quotes, numbers do not.</p>

<pre class="prettyprint linenums languague-php">
// array of letters
$letters = array('z','y','a','n','b','x','c');
$numbers = array(1, 7, 3, 85, -3, 1);
$empty_array = array(); // an empty array, (a falsy value)
</pre>

<p>You can put mixed items into an array, including other variables (and, as in this example, other arrays).</p>
<pre class="prettyprint linenums languague-php">
$mixed = array( 'a string', 1, $letters);
</pre>



<h2>Selecting items</h2>
<p>Each item in an array has an <em>index</em>; this is the postition of the item within the array. Arrays are <em>zero-indexed</em>; meaning the index starts at zero.</p>

<p>We use square brack notation to select an item.</p>

<pre class="prettyprint linenums languague-php">
echo $letters[0]; // z
</pre>



<h2>Testing arrays</h2>

<h3>empty</h3>
<p>You can use the <code>empty</code> function to test if an array has items within it. It won't throw and error if the array itself doesn't exist.</p>
<pre class="prettyprint linenums languague-php">
$empty_array = array();
if ( empty( $empty_array )) { echo 'The array has no values in it.'; }
</pre>

<p>A useful variation is to perform an action if the array is not empty. We use the exclaimation mark to negate the test, that is test for the opposite value.</p>
<pre class="prettyprint linenums languague-php">
$not_empty = array( 1 );
if ( ! empty( $empty_array )) { echo 'The array is not empty'; }
</pre>


<h3>print_r</h3>
<p>We use <code>print_r()</code> to print out an array in a human readable format. This is really only a good idea for testing.</p>
<pre class="prettyprint linenums languague-php">
print_r($letters);
Array
(
    [0] => z
    [1] => y
    [2] => a
    [3] => n
    [4] => b
    [5] => x
    [6] => c
)
</pre>
<p>Note print_r uses whitespace to format the array, so you will want to either view the page source or use html &lt;pre&gt; tags to see it formatted nicely.</p>

<p><code>var_dump</code> will give you a bit more information about arrays (and any variable for that matter):</p>
<pre class="prettyprint linenums languague-php">
var_dump($letters);
array(7) { [0]=&gt; string(1) &quot;z&quot; [1]=&gt; string(1) &quot;y&quot; [2]=&gt; string(1) &quot;a&quot; [3]=&gt; string(1) &quot;n&quot; [4]=&gt; string(1) &quot;b&quot; [5]=&gt; string(1) &quot;x&quot; [6]=&gt; string(1) &quot;c&quot; }
</pre>


<h3>Count</h3>
<p>You can count the number of items using the <code>count</code> function:</p>

<pre class="prettyprint linenums languague-php">
echo &#039;There are &#039;.count($letters).&#039; items in the $letters array&#039;;
// 7
</pre>

<h3>Sum</h3>
<p>This will add all the values and return the result</p>
<pre class="prettyprint linenums languague-php">
echo &#039;Sum of values: &lt;strong&gt;array_sum&lt;/strong&gt;&lt;br&gt;&#039;;
echo array_sum($numbers);
</pre>


<h3>Range</h3>
<p>This will fill an array with numbers within the defined numbers</p>
<pre class="prettyprint linenums languague-php">
$range = range(1, 10); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
print_r($range);
Array
(
    [0] =&gt; 1
    [1] =&gt; 2
    [2] =&gt; 3
    [3] =&gt; 4
    [4] =&gt; 5
    [5] =&gt; 6
    [6] =&gt; 7
    [7] =&gt; 8
    [8] =&gt; 9
    [9] =&gt; 10
)
</pre>
<p>Notice how the indices (on the left) are one less than the value (on the right). This is because arrays are zero indexed.</p>

<h3>Shuffle</h3>
<p>This will shuffle an array into a random order.</p>
<pre class="prettyprint linenums languague-php">
echo &#039;1 to 10 mixed up: &lt;strong&gt;shuffle&lt;/strong&gt;&lt;br&gt;&#039;;
shuffle($range);
print_r($range);
</pre>

<h3>Getting a random value</h3>
<p>There isn't a function in PHP that will give you a random value but we can use <code>array_rand</code> to get a random key from an array, and then use that result to select the value:</p>
<pre class="prettyprint linenums languague-php">
echo &#039;Random number from 1 to 20: &lt;strong&gt;array_rand&lt;/strong&gt; (gives a random key, not the value)&lt;br&gt;&#039;;
$random_key = array_rand($range);
echo $range[$random_key];
</pre>

<ul class="notes-links">
	<li><a href="http://nz.php.net/empty">empty</a></li>
	<li><a href="http://nz.php.net/print_r">print_r</a></li>
	<li><a href="http://nz.php.net/var_dump">var_dump</a></li>
	<li><a href="http://nz.php.net/count">count</a></li>
	<li><a href="http://nz.php.net/sum">sum</a></li>
	<li><a href="http://nz.php.net/array_rand">array_rand</a></li>
	<li><a href="http://nz.php.net/shuffle">shuffle</a></li>
	<li><a href="http://nz.php.net/range">range</a></li>
</ul>
