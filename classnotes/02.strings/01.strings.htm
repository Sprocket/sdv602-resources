<h1>Strings</h1>

<p>A <kbd>string</kbd> in PHP is a series, or 'string', of zero or more characters specified within quotes.</p>

<p>Strings are truthy values except when they have zero characters ('') or have the value of the number zero <kbd>('0')</kbd>.</p>


<h2>Creating strings</h2>

<p>Strings are are usually specfied using single or double quotes.</p>

<pre class="prettyprint linenums languague-php">
echo &#039;Hello World&#039;;
$greeting = &quot;Hello World&quot;;
</pre>

<h3>Single Quotes</h3>

<p>Unlike the double-quoted and heredoc syntaxes, variables and escape sequences for special characters will not be expanded when they occur in single quoted strings.</p>

<h3>Double Quotes</h3>

<p>Using double quotes has the advantage that variables and escape sequences will be expanded.</p>

<pre class="prettyprint linenums languague-php">
$name = &#039;John&#039;;
echo &quot;Hello {$name}&quot;; // Hello John
</pre>

<p>Note that the curly braces are optional but reccomended.</p>


<h2>Joining strings</h2>

<p>To join two or more strings we use the concatenation operator, the full stop. This will return the result of adding the right sided string onto the left sided string.

<pre class="prettyprint linenums languague-php">
$string1 = &#039;Hello &#039;; // notice the space
$string2 = &#039;World&#039;;
$string3 = $string1 . $string2; // Hello World
</pre>

<p>The second is the concatenating assignment operator ('.='), which appends the argument on the right side to the argument on the left side. Please read Assignment Operators for more information.</p>

<pre class="prettyprint linenums languague-php">
$string1 = &#039;Hello &#039;;
$string1 .= &#039;World&#039;; // Hello World
</pre>

<p>See the section on operators for more on the string operators.</p>




<h2>Escaping Strings</h2>

<p>We specify the content of strings using strings, sometimes this will cause problems as the characters can have special meaning in PHP or HTML contexts. We get around this by 'escaping' characters - this ensure that we can specify the character without breaking our code. This is done by putting a backslash before the character.</p>
<p>In the example below we can't use a single quote mark in the phrase as it is the same as the delimiter used to specify the string.</p>

<pre class="prettyprint linenums languague-php">
$phrase = &#039;I&#039;ll be back&#039;; // invalid syntax
</pre>

<p>To use a single quote within single quotes we have to escape the quote character. (Most code editors will highlight problems with incorrect nesting or irregularities with quotes.)</p>

<pre class="prettyprint linenums languague-php">
$phrase = &#039;I\&#039;ll be back&#039;; // valid 
echo $phrase; // I&#039;ll be back
</pre>

<p>Another way around single quotes is to use double quotes to delimit the string. This will also work the other way around. You can also escape characters and use different quotes.</p>

<pre class="prettyprint linenums languague-php">
$phrase = &quot;I&#039;ll be back&quot;; // valid
$phrase2 = &#039;He said &quot;I will be back&quot;&#039;; // valid
$phrase3 = &#039;He said &quot;I\&#039;ll be back&quot;&#039;; // valid
</pre>

<p>Whitespace, such as linefeeds and tabs, can also be escaped. This only works when using double quotes.</p>

<table class="table table-striped">
<caption><strong>Escaped characters</strong></caption>

<thead><tr><th>Sequence</th><th>Meaning</th></tr></thead>
<tbody>
<tr>
<td><em>\n</em></td>
<td>linefeed</td>
</tr>

<tr>
<td><em>\r</em></td>
<td>carriage return</td>
</tr>

<tr>
<td><em>\t</em></td>
<td>horizontal tab</td>
</tr>

<tr>
<td><em>\v</em></td>
<td>vertical tab</td>
</tr>

<tr>
<td><em>\e</em></td>
<td>escape</td>
</tr>

<tr>
<td><em>\f</em></td>
<td>form feed</td>
</tr>

<tr>
<td><em>\\</em></td>
<td>backslash</td>
</tr>

<tr>
<td><em>\$</em></td>
<td>dollar sign</td>
</tr>

<tr>
<td><em>\&quot;</em></td>
<td>double-quote</td>
</tr>

</tbody>
</table>


<p>There is a built-in php function for adding slashes to strings: <kbd>addslashes</kbd>. It is most commonly used on text before inserting it into a database. You can remove slashes using <kbd>stripslashes</kbd>.</p>


<h2>Dealing with entities</h2>

<p>There are times where you will want to protect your script again user input, encode it to use in an URL, or make sure that it is safe to save to a database.</p>

<h3>htmlspecialchars</h3>
<p>Convert special characters to their HTML entities</p>

<pre class="prettyprint linenums languague-php">
$html = &quot;&lt;h1&gt;I am some HTML&lt;/h1&gt;&quot;;
echo htmlspecialchars( $html );
// &amp;lt;h1&amp;gt;I am some HTML&amp;lt;/h1&amp;gt;
</pre>

<h3>urlencode</h3>
<p>This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page.</p>

<pre class="prettyprint linenums languague-php">
$link = &#039;my super gallery of holiday photos!&#039;;
echo &#039;&lt;a href=&quot;/gallery.php?gallery_name=&#039;
	. urlencode( $link )
	. &#039;&quot;&gt;Next Gallery&lt;/a&gt;&#039;;
// &lt;a href=&quot;/gallery.php?gallery_name=my+super+gallery+of+holiday+photos%21&quot;&gt;Next Gallery&lt;/a&gt;
</pre>


<ul class="notes-links">
	<li><a href="http://nz.php.net/manual/en/language.types.string.php">String Type</a></li>
	<li><a href="http://nz.php.net/manual/en/function.addslashes.php">addslashes</a></li>
	<li><a href="http://nz.php.net/manual/en/function.stripslashes.php">stripslashes</a></li>
	<li><a href="http://nz.php.net/manual/en/function.htmlentities.php">htmlentities</a></li>
	<li><a href="http://php.net/manual/en/function.htmlspecialchars.php">htmlspecialchars</a></li>
	<li><a href="http://nz.php.net/manual/en/function.urlencode.php">urlencode</a></li>
</ul>
